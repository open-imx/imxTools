name: Enforce Version Bump

on:
  pull_request:
    branches:
      - master
      - develop
  push:
    branches:
      - master
      - develop

jobs:
  enforce-version:
    runs-on: windows-latest
    permissions:
      contents: read

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        if: ${{ !env.ACT }}
        with:
          python-version: "3.11"

      - name: üì¶ Install dependencies
        run: |
          pip install bump-my-version
          pip install packaging

      - name: üî¢ Get current version from project
        id: get_version
        shell: powershell
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $pyproject = Get-Content "pyproject.toml" -Raw
          $match = [regex]::Match($pyproject, '(?ms)^\[tool\.bumpversion\].*?^current_version\s*=\s*"([^"]+)"')
          if (-not $match.Success) {
            Write-Error "Could not find current_version in pyproject.toml"
            exit 1
          }
          $version = $match.Groups[1].Value.Trim()
          Write-Host "Extracted version: $version"
          "CURRENT_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: üîÑ Fetch base branches
        run: |
          git fetch origin master
          git fetch origin develop

      - name: üî¢ Get base versions from master and develop
        id: base_versions
        shell: powershell
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8

          # Fetch pyproject.toml from origin/master
          $masterContent = git show origin/master:pyproject.toml
          [System.IO.File]::WriteAllLines("tmp-master.toml", $masterContent -split "`n", [System.Text.Encoding]::UTF8)

          # Fetch pyproject.toml from origin/develop
          $developContent = git show origin/develop:pyproject.toml
          [System.IO.File]::WriteAllLines("tmp-develop.toml", $developContent -split "`n", [System.Text.Encoding]::UTF8)

          # Read content
          $masterToml = Get-Content .\tmp-master.toml -Raw
          $developToml = Get-Content .\tmp-develop.toml -Raw

          # Extract versions using regex
          $masterMatch = [regex]::Match($masterToml, '(?ms)^\[tool\.bumpversion\].*?^current_version\s*=\s*"([^"]+)"')
          $developMatch = [regex]::Match($developToml, '(?ms)^\[tool\.bumpversion\].*?^current_version\s*=\s*"([^"]+)"')

          if (-not $masterMatch.Success) {
            Write-Error "Could not find current_version in tmp-master.toml"
            exit 1
          }
          if (-not $developMatch.Success) {
            Write-Error "Could not find current_version in tmp-develop.toml"
            exit 1
          }

          $masterVersion = $masterMatch.Groups[1].Value.Trim()
          $developVersion = $developMatch.Groups[1].Value.Trim()

          # Write to GITHUB_ENV (for future steps)
          "MAIN_VERSION=$masterVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DEV_VERSION=$developVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Write to GITHUB_OUTPUT (for this step's outputs)
          "master_version=$masterVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "develop_version=$developVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: üö® Enforce version bump
        run: python .github/enforce_version_bump.py
